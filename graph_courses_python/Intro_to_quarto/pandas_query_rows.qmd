# Imports

```{python}
import pandas as pd
```

# Dataset

```{python}
yaounde = pd.read_csv('data/yaounde_data.csv')
yaounde
```


```{python}
yao = yaounde[
    [
        "age",
        "sex",
        "weight_kg",
        "neighborhood",
        "occupation",
        "symptoms",
        "is_smoker",
        "is_pregnant",
        "igg_result",
        "igm_result",
    ]
]
yao.head()
```

# Introduce qquery


```{python}
yao.query('sex == "Male"')
```

```{python}
# Get the number of rows that fulfil the criterion
c
```

```{python}
# need to create a new object/variable
yao_male = yao.query('sex == "Male"')
yao_male
```

# Practice Q: Subset for pregnant respondents
Subset the yao data frame to respondents who were pregnant during the survey (The is_pregnant column contains “Yes”, “No” or NaN). Assign the result to a new DataFrame called yao_pregnant. Then print this new DataFrame. There should be 24 rows.


```{python}
yao_pregnant = yao.query('is_pregnant == "Yes"')
yao_pregnant
```

# Relational operators

```{python}
yao.query('sex == "Male"')
yao.query('sex == "Male"')
yao.query('age > 7')
yao.query('age >= 7')
yao.query('age < 7')
yao.query('age <= 7')
yao.query("neighborhood.isin(['Briqueterie', 'Carriere'])")
```

# Practice Q relational operations
From yao, keep only respondents who were children (under 18). Assign the result to a new DataFrame called yao_children. There should be 291 rows.

With isin(), keep only respondents who live in the “Carriere” or “Ekoudou” neighborhoods. Assign the result to a new DataFrame called yao_carriere_ekoudou. There should be 426 rows.


```{python}
yao_children = yao.query('age < 18')
yao_children
```


```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Ekoudou', 'Carriere'])")
yao_carriere_ekoudou
```

# Accessing external variables


```{python}
min_age= 25
yao.query('age >= @min_age')
```

# practice Question: Subset  for young rrepsondents
From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_young. There should be 590 rows

```{python}
max_age = 30
yao_young = yao.query('age <= @max_age')
yao_young
```

# Combining conditions

```{python}
yao.query('age < 18 | age > 65')
```

```{python}
yao.query('is_pregnant == "Yes" | is_smoker == "Ex-smoker"')
```
```{python}
yao.query('is_pregnant == "Yes" & is_smoker == "Ex-smoker"')
```

# Practice Q: Subset for IggG positive men

Subset yao to only keep men who tested IgG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. Think carefully about whether to use & or |.
```{python}
yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"')
yao_igg_positive_men
```

# Negating conditions with the ~ operator

```{python}
# returns individuals who are not students
yao.query('~ (occupation == "Student")')
```

```{python}
yao.query("~(age < 18 | weight_kg < 30)")
```

# Practice Q: Drop Smokers and drop those over 50
We want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.


```{python}
yao_dropped = yao.query("~(age > 18 | is_smoker == 'Non-smoker')")
yao_dropped
```

# NaN values


```{python}
# yao.query('is_pregrant == "NaN"')
# this doesn't work
```


```{python}
yao.query("is_pregnant.isna()") 
```


```{python}
yao.query("is_pregnant.notna()") 
```

# Practice Q: Keep Missing Smoking Status
From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.


```{python}
yao.query("is_smoker .isna()") 
```

# Querying Based on String Patterns

```{python}
yao.occupation.value_counts()
```


```{python}
yao.query("occupation.str.contains('Student')")
```


```{python}
yao.query("~(occupation.str.contains('Student'))")
```


```{python}
yao.query("occupation.str.contains('Student|Farmer')")
```

# Practice Q: Symptoms
The symptoms column contains a list of symptoms that respondents reported.

Query yao to find respondents who reported “Cough” or “Fever” as symptoms. Your answer should have 219 rows.


```{python}
yao.query("symptoms.str.contains('Cough|Fever')")
```