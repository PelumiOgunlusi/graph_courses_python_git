# Imports

```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar
```
## Data


```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column
weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```

## Adding summary statistics with transform


```{python}
weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
```


```{python}
# Does not work
weather['mean_precip'] = weather.groupby('month').agg(mean_precip = ('precipitation', 'mean'))
weather
```


```{python}
weather['mean_precip_month'] = weather.groupby('month')['precipitation'].transform('mean')
weather
```


```{python}
weather['prep_median_month'] = weather.groupby('month')['precipitation'].transform('median')    
weather
```


```{python}
weather['precip_sum_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```


```{python}
weather["precip_month_perc"] = (
    100 * weather["precipitation"] / weather["precip_sum_month"]
)
weather
```


```{python}
warnings.filterwarnings(
    "ignore"
)
pd.options.mode.copy_on_write = True  
```

# Practice Q: Daily Tip Proportions
Using the tips dataset, calculate: 
1. Add a new column with the total tips for each day
2. Add a new column with the proportion of each tip relative to the daily total


```{python}
# Your code here:
tips = px.data.tips()
tips
```

```{python}
tips['daily_total_tips'] = tips.groupby('day')['tip'].transform('sum')
tips['tip_proportion'] = tips['tip'] / tips['daily_total_tips']

tips
```

```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```

## Counting Values Within Groups Using value_counts()


```{python}
# Count of weather types
weather["weather"].value_counts()
```


```{python}
weather['weather'].value_counts(normalize=True)
```


```{python}
# Counts of weather types per month
weather.groupby('month')['weather'].value_counts()
```


```{python}
weather.groupby('month')['weather'].value_counts(normalize=True).reset_index()
```

#  Practice Q: Count Smokers and Non-Smokers by Day
Using the tips dataset, count the number of smokers and non-smokers for each day.

```{python}
tips.groupby('day')['smoker'].value_counts().reset_index(name='count')

```

# Computing Cumulative Sums Within Groups


```{python}
# Cumulative sum of precipitation
weather["precip_cumul"] = weather["precipitation"].cumsum()
weather
```


```{python}
# Cumulative precipitation per month
weather["precip_cumul"] = weather.groupby("month")["precipitation"].cumsum()
weather
```

# Practice Q: Cumulative Tip Amount by Day
Using the tips dataset, compute the cumulative sum of total_bill for each day,
Adding a new column cumul_total_bill_day. Then add another column cumul_tip_day
that contains the cumulative sum of tip for each day.


```{python}
tips = px.data.tips()
tips = tips.sort_values("day")
tips
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()
tips["cumul_tip_day"] = tips.groupby("day")["tip"].cumsum()
tips
```