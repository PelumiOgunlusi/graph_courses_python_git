# Imports
```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
```

# Setting up the Open AI client

```{python}
from local_settings import OPENAI_KEY
client = OpenAI(api_key=OPENAI_KEY)
```

# Making our first call

```{python}
response = client.chat.completions.create(
    model="gpt-4o-mini", 
    messages=[{"role": "user", "content": "What is the most tourist-friendly city in France?"}]
)
print(response.choices[0].message.content)
```

# Defining a helper function


```{python}
def llm_chat(message):
    response = client.chat.completions.create(
    model="gpt-4o-mini", 
    messages=[{"role": "user", "content": message}]
)
    return response.choices[0].message.content 
```


```{python}
llm_chat("Tell me why Python is an awesome language")
```

# Practice Q: Get tourist-friendly city in Brazil

Use the llm_chat function to ask the model for the most tourist-friendly city in Brazil. Store the response in a variable called rec_brazil. Print the response.


```{python}
rec_brazil = llm_chat('What is the most tourist-friendly city in Brazil')
print (rec_brazil)
```

# Variables as prompt input


```{python}
def city_rec(country):
    prompt = f"What is the most tourist-friendly city in {country}?"
    return llm_chat(prompt) 
```


```{python}
city_rec("Nigeria")
```


```{python}
# Incorrect usage
country_df = pd.DataFrame({"country": ["Nigeria", "Chile", "France", "Canada"]})

response = city_rec(country_df["country"])

print(response)
```


```{python}
# Vectorize the function
city_rec_vec = np.vectorize(city_rec)

# Apply the function to each country
country_df["city_rec"] = city_rec_vec(country_df["country"])
country_df
```

#  Practice Q: Get local dishes

Create a function called get_local_dishes that takes a country name as input and returns some of the most famous local dishes from that country. Then, vectorize this function and apply it to the country_df DataFrame to add a column with local dish recommendations for each country.


```{python}
def local_dishes(country):
    prompt = f"What are some of the most famous local dishes from {country}?"
    return llm_chat(prompt) 

local_dishes_vec = np.vectorize(local_dishes)
```


```{python}
country_df["best_dishes"] = local_dishes_vec(country_df["country"])
```


```{python}
country_df
```

## Automated Summary: Movies dataset 
```{python}
import vega_datasets as vd

# Load the movies dataset
movies = vd.data.movies().head()  # Using only the first 5 rows to conserve API credits
movies
```


```{python}
# Convert each movie's data into a dictionary
movies['full_dict'] = movies.to_dict(orient="records")
```


```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, provide a one-paragraph summary of its performance for my report."
    return llm_chat(prompt)
```


```{python}
# Vectorize the function to apply it to the DataFrame
movie_performance_vec = np.vectorize(movie_performance)
```


```{python}
# Generate summaries for each movie
movies["llm_summary"] = movie_performance_vec(movies["full_dict"])
movies
```


```{python}
movies.to_csv('movies_output.csv')
```

# Practice Q: Weather Summary
Using the first 5 rows of the seattle_weather dataset from vega_datasets, create a function that takes all weather columns for a particular day and generates a summary of the weather conditions for that day. The function should use the LLM to generate a one-paragraph summary for a report, considering the data provided. Store the results in a column called weather_summary.


```{python}
weather = vd.data.seattle_weather().head()
weather['full_dict'] = weather.to_dict(orient="records")
```

```{python}
weather
```


```{python}
def weather_summ(weather_data):
    prompt = f"Considering the following data on this daily weather description of seattle {weather_data}, provide a one-paragraph summary of this information for my report."
    return llm_chat(prompt)

weather_summ_vec = np.vectorize(weather_summ)
```

```{python}
# Generate summaries for each movie
weather["llm_summary"] = weather_summ_vec(weather["full_dict"])
weather
```


```{python}
weather.to_csv('weather_data.csv')
```